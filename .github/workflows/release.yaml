name: Build & Release

on:
  workflow_dispatch:
    push:
      tags:
        - "v*.*.*"

jobs:
  build_binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CGO_ENABLED: 0
      NAME: ncr-tool
      DESC: "ncr-mirror cli tools"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Env
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Check Version
        id: prep
        run: |
          echo "VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          echo "VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build Binaries
        id: build
        shell: bash
        run: |
          mkdir ncr-tool-binaries
          
          linux_arch=('amd64' 'arm64')
          for arch in "${linux_arch[@]}"; do
            export GOARCH="$arch"
            filename="linux-$arch"
            go build -o ncr-tool-binaries/ncr-tool-${filename}_${env:VERSION} -ldflags="-extldflags -static" -trimpath
          done
          
          windows_arch=('amd64' 'arm64')
          for arch in "${windows_arch[@]}"; do
            export GOOS="windows"
            export GOARCH="$arch"
            filename="windows-$arch"
            go build -o ncr-tool-binaries/ncr-tool-${filename}_${env:VERSION}.exe -ldflags="-extldflags -static" -trimpath
          done
          
          darwin_arch=('amd64' 'arm64')
          for arch in "${darwin_arch[@]}"; do
            export GOOS="darwin"
            export GOARCH=$arch
            filename="darwin-$arch"
            go build -o ncr-tool-binaries/ncr-tool-${filename}_${env:VERSION} -ldflags="-extldflags -static" -trimpath
          done

      - name: Move Files to Release Directory
        shell: bash
        run: |
          mkdir -p release

          for file in $(ls builds | grep -E "^ncr-tool"); do
            mv ncr-tool-binaries/$file/$file release/
          done

          for file in $(ls release); do
            sha256sum release/$file | awk '{print $1}' > release/$file.sha256.txt
          done

          ls -l release/

      - name: Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            release/*